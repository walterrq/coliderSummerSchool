def selection_4():

    # Library import
    import numpy
    import matplotlib
    import matplotlib.pyplot   as plt
    import matplotlib.gridspec as gridspec

    # Library version
    matplotlib_version = matplotlib.__version__
    numpy_version      = numpy.__version__

    # Histo binning
    xBinning = numpy.linspace(100.0,200.0,201,endpoint=True)

    # Creating data sequence: middle of each bin
    xData = numpy.array([100.25,100.75,101.25,101.75,102.25,102.75,103.25,103.75,104.25,104.75,105.25,105.75,106.25,106.75,107.25,107.75,108.25,108.75,109.25,109.75,110.25,110.75,111.25,111.75,112.25,112.75,113.25,113.75,114.25,114.75,115.25,115.75,116.25,116.75,117.25,117.75,118.25,118.75,119.25,119.75,120.25,120.75,121.25,121.75,122.25,122.75,123.25,123.75,124.25,124.75,125.25,125.75,126.25,126.75,127.25,127.75,128.25,128.75,129.25,129.75,130.25,130.75,131.25,131.75,132.25,132.75,133.25,133.75,134.25,134.75,135.25,135.75,136.25,136.75,137.25,137.75,138.25,138.75,139.25,139.75,140.25,140.75,141.25,141.75,142.25,142.75,143.25,143.75,144.25,144.75,145.25,145.75,146.25,146.75,147.25,147.75,148.25,148.75,149.25,149.75,150.25,150.75,151.25,151.75,152.25,152.75,153.25,153.75,154.25,154.75,155.25,155.75,156.25,156.75,157.25,157.75,158.25,158.75,159.25,159.75,160.25,160.75,161.25,161.75,162.25,162.75,163.25,163.75,164.25,164.75,165.25,165.75,166.25,166.75,167.25,167.75,168.25,168.75,169.25,169.75,170.25,170.75,171.25,171.75,172.25,172.75,173.25,173.75,174.25,174.75,175.25,175.75,176.25,176.75,177.25,177.75,178.25,178.75,179.25,179.75,180.25,180.75,181.25,181.75,182.25,182.75,183.25,183.75,184.25,184.75,185.25,185.75,186.25,186.75,187.25,187.75,188.25,188.75,189.25,189.75,190.25,190.75,191.25,191.75,192.25,192.75,193.25,193.75,194.25,194.75,195.25,195.75,196.25,196.75,197.25,197.75,198.25,198.75,199.25,199.75])

    # Creating weights for histo: y5_M_0
    y5_M_0_weights = numpy.array([0.0285754532431,0.0290417432443,0.0166097724979,0.0354989859968,0.0206936841159,0.0397865682501,0.0277796980586,0.0379117430171,0.0189877072127,0.0345320051112,0.0280634251834,0.0172426456843,0.0225707951066,0.0406039900361,0.0200536559123,0.0286939553535,0.035200005218,0.0232998877008,0.0370069448199,0.026730058859,0.0291240122007,0.0410383985264,0.0232760681811,0.0268568290911,0.0256636314786,0.0116067503579,0.0409172625268,0.0173997308359,0.0387828274326,0.0175163182234,0.026499307262,0.0293687119587,0.0413458993641,0.0209784831191,0.0311746896185,0.0171668377725,0.029098818478,0.0134939113537,0.0210428691131,0.0195169196817,0.0204873223329,0.0236050523933,0.0292644099466,0.0240511874163,0.0119093155164,0.0175703908234,0.0140078564266,0.0234085184526,0.0311724221834,0.0620468484335,0.0745008843003,0.0266935050576,0.0115348268602,0.0240900773629,0.0210832844251,0.0176563037083,0.0319324938952,0.022667255,0.00908617107528,0.0119841065178,0.0266670516487,0.0177909710274,0.0262631733698,0.0359508926726,0.0115901614367,0.0212719052466,0.0226932228571,0.0181723513119,0.0117356116691,0.0211994160352,0.00558228766503,0.0212247151135,0.0182717909356,0.0207151812324,0.0175961525501,0.0113760972455,0.0178903350699,0.0122058845688,0.0113166835763,0.0151891923764,0.00906768117313,0.0299937453166,0.0111466671739,0.0325955010642,0.0178114924597,0.0212679429611,0.00866808582705,0.00916438842305,0.00612576665203,0.0329978906232,0.0,0.0204492546178,0.0117804748183,0.011825457065,0.0209205764926,0.0153103833441,0.0183350180183,0.0149277227604,0.0,0.0,0.00305618866678,0.0118391441275,0.0123950642329,0.0121688223123,0.00559181089222,0.00873638829974,0.0206139436931,0.0184171289414,0.00308049144787,0.00925872059201,0.0258893214276,0.00919446514732,0.00929147701225,0.00884055060125,0.026452286614,0.0123330235454,0.018134487437,0.00307609170775,0.00926782697761,0.0137889985571,0.00871948560212,0.018537351096,0.0109455708789,0.00562043096126,0.0118387043825,0.00864918366397,0.0154249483628,0.0118957910679,0.0210649021688,0.00616593689778,0.00312259702959,0.00304050442921,0.00614594224327,0.0124221612268,0.00852651771828,0.00622841503984,0.0117106194961,0.00933284739534,0.0027808510516,0.0181941049463,0.00307244319863,0.0092768669434,0.00271777055053,0.0124371743953,0.0,0.00308711281628,0.0,0.00895665472734,0.0062033404147,0.00309783618081,0.00543036493621,0.00626608423602,0.0177395323166,0.00312570959952,0.00581851088048,0.00625380802203,0.0,0.00310966806915,0.00306872597935,0.00312934436661,0.00308087622473,0.0123634071751,0.0093806353067,0.00630084012171,0.00563133755287,0.00938115063285,0.00843552486275,0.00486147006363,0.00545316296495,0.0153175383614,0.00587566856637,0.00862446633162,0.0140177942051,0.00314649671112,0.00546151124854,0.00624901205335,0.00624717291159,0.0121654463535,0.0031456011888,0.00306294058448,0.00546106921322,0.00315468238068,0.00946294548924,0.00313639860898,0.0,0.0093957607017,0.0,0.0125565972217,0.00624545515777,0.0156396675907,0.00938301954901,0.0121227223804,0.00315145758416,0.00898432430593,0.0,0.00625344156788,0.00311002994262,0.0,0.0156843039964,0.00312272070787])

    # Creating a new Canvas
    fig   = plt.figure(figsize=(8,6),dpi=80)
    frame = gridspec.GridSpec(1,1)
    pad   = fig.add_subplot(frame[0])

    # Creating a new Stack
    pad.hist(x=xData, bins=xBinning, weights=y5_M_0_weights,\
             label="$hsig$", histtype="stepfilled", rwidth=1.0,\
             color="#5954d8", edgecolor="#5954d8", linewidth=1, linestyle="solid",\
             bottom=None, cumulative=False, normed=False, align="mid", orientation="vertical")


    # Axis
    plt.rc('text',usetex=False)
    plt.xlabel(r"$M$ $[ a_{1} a_{2} ]$ $(GeV/c^{2})$ ",\
               fontsize=16,color="black")
    plt.ylabel(r"$\mathrm{Events}$ $(\mathcal{L}_{\mathrm{int}} = 0.001\ \mathrm{fb}^{-1})$ ",\
               fontsize=16,color="black")

    # Boundary of y-axis
    ymax=(y5_M_0_weights).max()*1.1
    ymin=0 # linear scale
    #ymin=min([x for x in (y5_M_0_weights) if x])/100. # log scale
    plt.gca().set_ylim(ymin,ymax)

    # Log/Linear scale for X-axis
    plt.gca().set_xscale("linear")
    #plt.gca().set_xscale("log",nonposx="clip")

    # Log/Linear scale for Y-axis
    plt.gca().set_yscale("linear")
    #plt.gca().set_yscale("log",nonposy="clip")

    # Saving the image
    plt.savefig('../../HTML/MadAnalysis5job_0/selection_4.png')

# Running!
if __name__ == '__main__':
    selection_4()
