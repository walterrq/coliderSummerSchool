def selection_2():

    # Library import
    import numpy
    import matplotlib
    import matplotlib.pyplot   as plt
    import matplotlib.gridspec as gridspec

    # Library version
    matplotlib_version = matplotlib.__version__
    numpy_version      = numpy.__version__

    # Histo binning
    xBinning = numpy.linspace(100.0,200.0,201,endpoint=True)

    # Creating data sequence: middle of each bin
    xData = numpy.array([100.25,100.75,101.25,101.75,102.25,102.75,103.25,103.75,104.25,104.75,105.25,105.75,106.25,106.75,107.25,107.75,108.25,108.75,109.25,109.75,110.25,110.75,111.25,111.75,112.25,112.75,113.25,113.75,114.25,114.75,115.25,115.75,116.25,116.75,117.25,117.75,118.25,118.75,119.25,119.75,120.25,120.75,121.25,121.75,122.25,122.75,123.25,123.75,124.25,124.75,125.25,125.75,126.25,126.75,127.25,127.75,128.25,128.75,129.25,129.75,130.25,130.75,131.25,131.75,132.25,132.75,133.25,133.75,134.25,134.75,135.25,135.75,136.25,136.75,137.25,137.75,138.25,138.75,139.25,139.75,140.25,140.75,141.25,141.75,142.25,142.75,143.25,143.75,144.25,144.75,145.25,145.75,146.25,146.75,147.25,147.75,148.25,148.75,149.25,149.75,150.25,150.75,151.25,151.75,152.25,152.75,153.25,153.75,154.25,154.75,155.25,155.75,156.25,156.75,157.25,157.75,158.25,158.75,159.25,159.75,160.25,160.75,161.25,161.75,162.25,162.75,163.25,163.75,164.25,164.75,165.25,165.75,166.25,166.75,167.25,167.75,168.25,168.75,169.25,169.75,170.25,170.75,171.25,171.75,172.25,172.75,173.25,173.75,174.25,174.75,175.25,175.75,176.25,176.75,177.25,177.75,178.25,178.75,179.25,179.75,180.25,180.75,181.25,181.75,182.25,182.75,183.25,183.75,184.25,184.75,185.25,185.75,186.25,186.75,187.25,187.75,188.25,188.75,189.25,189.75,190.25,190.75,191.25,191.75,192.25,192.75,193.25,193.75,194.25,194.75,195.25,195.75,196.25,196.75,197.25,197.75,198.25,198.75,199.25,199.75])

    # Creating weights for histo: y3_M_0
    y3_M_0_weights = numpy.array([0.0760002963686,0.0801132482285,0.0741401630095,0.0901440143468,0.0844820987349,0.0989540143843,0.0707630988903,0.0781344242048,0.0554831088721,0.0865475804314,0.0575993094724,0.0602567833381,0.0517662140477,0.0978455323697,0.0563128757582,0.0786923883449,0.0599420732425,0.0565006902474,0.0824323525432,0.0600984729204,0.0703491708171,0.0575731491957,0.0510394304206,0.0663304633913,0.0573586124475,0.0623006287156,0.0693438125571,0.0410325485506,0.0581205480683,0.0514608328585,0.0608634713448,0.0613650405598,0.078750216325,0.0598050900535,0.0611745285555,0.0545568215236,0.0603888491818,0.0428645546949,0.0639664847888,0.0479851408432,0.0451695813526,0.0519203095982,0.0697832827264,0.0431059822969,0.0423329194262,0.0405467710387,0.037622608466,0.0430048816786,0.0521488959042,0.116641452337,0.123066062246,0.0427107963339,0.0248399442136,0.0404259729404,0.0461895230537,0.0321454726388,0.0562020247468,0.0464136135013,0.0209269147519,0.0311284251467,0.0564149036472,0.0339938605676,0.053797864409,0.0594413751001,0.0358348022307,0.0327339243195,0.0392343737416,0.025822825991,0.0288981702358,0.0260085948646,0.0138624907888,0.0333374652252,0.0224168254024,0.0391344813853,0.0325168867499,0.0211407771214,0.0296219753567,0.0297247619218,0.0247905319187,0.0203520770928,0.0140301750716,0.0464391836965,0.0274382441516,0.0501607429741,0.024976087239,0.0369030182125,0.0197314800238,0.0332133233321,0.00751542319954,0.0514751353084,0.0036046922455,0.0386818327308,0.0306460757269,0.0336031704631,0.0536476746357,0.0224510641749,0.0261613753764,0.0281425288168,0.00959001462936,0.00864463393176,0.0205575097276,0.0218354322196,0.0187876335379,0.0218883484743,0.0100363522225,0.0216228230707,0.0289833105563,0.0256845165238,0.00739636724639,0.0204136703544,0.0426363898756,0.0223606665098,0.0113992885891,0.0211771682861,0.0361467024147,0.0151308230527,0.0294444451438,0.017488100016,0.0183703700998,0.0169170922664,0.0144419114137,0.0316589364508,0.0299988968944,0.0105879434832,0.0182420105294,0.0211584739444,0.0243198211526,0.0145944025046,0.0325773560469,0.00756470623854,0.00755731055129,0.00717966124642,0.0104827684932,0.0202720480014,0.0173764566096,0.0130414177691,0.0143672239642,0.0150684177267,0.00997524226573,0.025940488228,0.0100051397248,0.0142624592213,0.00333430850483,0.0189853417258,0.00367154285162,0.00378743765425,0.00936223195799,0.0147134275487,0.0130083563496,0.024082321807,0.0140047987602,0.0183427795781,0.0217638216233,0.003834790284,0.00713846513292,0.0129206056212,0.00372892405575,0.00381510966338,0.00744212103646,0.0112472217948,0.014132509241,0.0151680993395,0.0115086728266,0.00773021283982,0.00690883072982,0.0238572759895,0.0139487241649,0.00596431548498,0.0140991555906,0.0219133904062,0.0105735483062,0.0143622897595,0.0171977911924,0.0038602930414,0.014255445682,0.00766662735094,0.00766437099195,0.0251863922604,0.00667606608524,0.0146502017285,0.0141276986724,0.00675728376921,0.0137671223902,0.00703617311219,0.00577327240737,0.0115272294826,0.0,0.0182903157192,0.00766226355828,0.0191875935407,0.0115115979446,0.0185476923792,0.00386637930985,0.0140663667326,0.00750336867891,0.00767206171992,0.00754496660977,0.0,0.0294081691854,0.00756685020107])

    # Creating a new Canvas
    fig   = plt.figure(figsize=(8,6),dpi=80)
    frame = gridspec.GridSpec(1,1)
    pad   = fig.add_subplot(frame[0])

    # Creating a new Stack
    pad.hist(x=xData, bins=xBinning, weights=y3_M_0_weights,\
             label="$hsig$", histtype="stepfilled", rwidth=1.0,\
             color="#5954d8", edgecolor="#5954d8", linewidth=1, linestyle="solid",\
             bottom=None, cumulative=False, normed=False, align="mid", orientation="vertical")


    # Axis
    plt.rc('text',usetex=False)
    plt.xlabel(r"$M$ $[ a_{1} a_{2} ]$ $(GeV/c^{2})$ ",\
               fontsize=16,color="black")
    plt.ylabel(r"$\mathrm{Events}$ $(\mathcal{L}_{\mathrm{int}} = 0.001\ \mathrm{fb}^{-1})$ ",\
               fontsize=16,color="black")

    # Boundary of y-axis
    ymax=(y3_M_0_weights).max()*1.1
    ymin=0 # linear scale
    #ymin=min([x for x in (y3_M_0_weights) if x])/100. # log scale
    plt.gca().set_ylim(ymin,ymax)

    # Log/Linear scale for X-axis
    plt.gca().set_xscale("linear")
    #plt.gca().set_xscale("log",nonposx="clip")

    # Log/Linear scale for Y-axis
    plt.gca().set_yscale("linear")
    #plt.gca().set_yscale("log",nonposy="clip")

    # Saving the image
    plt.savefig('../../HTML/MadAnalysis5job_0/selection_2.png')

# Running!
if __name__ == '__main__':
    selection_2()
